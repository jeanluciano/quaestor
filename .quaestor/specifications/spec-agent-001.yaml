---
spec_id: "spec-agent-001"
title: "Update project-init.md frontmatter with agent-strategy"
type: "enhancement"
status: "implemented"
created: "2025-01-15"
author: "system"
priority: "high"
branch: "feat/spec-agent-001-frontmatter-update"
---

# Specification: Update project-init.md frontmatter with agent-strategy

## Use Case Overview

**ID**: spec-agent-001  
**Primary Actor**: Developer implementing agent integration  
**Goal**: Add agent orchestration configuration to project-init.md frontmatter  
**Priority**: high

## Context & Background

The project-init command currently operates as a monolithic command that does all analysis internally. To leverage Quaestor's agent system, we need to update the frontmatter to include agent-strategy configuration and enable the Task tool for agent spawning.

## Main Success Scenario

1. Developer opens project-init.md file
2. Developer updates frontmatter with agent-strategy section
3. Developer adds Task to allowed-tools list
4. Developer updates intelligence-features to use specification terminology
5. Developer validates the configuration works with command processor
6. System can now orchestrate agents from project-init

## Contract Definition

### Inputs
```yaml
inputs:
  current_frontmatter:
    type: "yaml"
    description: "Existing project-init.md frontmatter"
    required: true
```

### Outputs
```yaml
outputs:
  updated_frontmatter:
    type: "yaml"
    description: "Enhanced frontmatter with agent configuration"
    includes:
      - agent-strategy mapping
      - Task in allowed-tools
      - Updated intelligence-features
```

### Behavior Rules
- Must maintain all existing configuration fields
- agent-strategy must map analysis types to appropriate agents
- Task tool must be added to allowed-tools for agent spawning
- "milestone-generation" must be replaced with "specification-generation"

## Acceptance Criteria

- [ ] Frontmatter includes agent-strategy section with:
  - project_analysis: [researcher, architect]
  - security_audit: security
  - spec_generation: planner
  - documentation: [architect, implementer]
  - quality_definition: qa
- [ ] Task is added to allowed-tools list
- [ ] intelligence-features updated from "milestone-generation" to "specification-generation"
- [ ] All existing frontmatter fields preserved
- [ ] YAML syntax is valid and parseable

## Test Scenarios

### Scenario 1: Agent strategy configuration present
```gherkin
Given the project-init.md file is loaded
When the frontmatter is parsed
Then agent-strategy section should exist
And it should contain mappings for all analysis types
And Task should be in the allowed-tools list
```

### Scenario 2: Specification terminology used
```gherkin
Given the updated frontmatter
When checking intelligence-features
Then it should contain "specification-generation"
And it should not contain "milestone-generation"
```

## Implementation Notes

The agent-strategy section should follow this structure:
```yaml
agent-strategy:
  project_analysis: [researcher, architect]
  security_audit: security
  spec_generation: planner
  documentation: [architect, implementer]
  quality_definition: qa
```

## Dependencies

- None - this is a foundational change that other specs depend on

## Estimated Effort

2-3 hours including testing and validation