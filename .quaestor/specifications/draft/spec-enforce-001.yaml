id: spec-enforce-001
title: Claude Template Rule Enforcement System
type: enhancement
priority: critical
description: |
  Implement a robust system to ensure Claude actually follows the rules defined in Quaestor
  templates (CRITICAL_RULES.md, QUAESTOR_CLAUDE.md) regardless of interaction mode. Current
  issue: Claude ignores critical workflow requirements and doesn't stop to ask for
  clarification even when explicitly required by the templates.

rationale: |
  Claude's base training often overrides project-specific rules, treating them as suggestions
  rather than requirements. This leads to:
  - Skipping Research → Plan → Implement workflow
  - Not asking for clarification on vague requirements
  - Ignoring CRITICAL_RULES.md directives
  - Proceeding with implementations without proper validation
  This specification addresses making template rules truly enforceable.

contract:
  inputs:
    template_files: "list[Path] - Template files to enforce (CRITICAL_RULES.md, etc.)"
    interaction_mode: "enum - 'framework' | 'drive' - Current interaction mode"
    user_request: "string - The user's request/command"
    session_context: "dict - Current session state and context"
  outputs:
    enforcement_result: "object - Whether to proceed, block, or request clarification"
    rule_violations: "list[string] - Detected rule violations"
    required_response: "string - Mandatory response template if rules violated"
    context_injection: "string - Rules to inject into Claude's context"
  behavior:
    - "Load and parse template rules from .quaestor/ directory"
    - "Identify hard stops and mandatory clarification triggers"
    - "Inject rules prominently into session context"
    - "Block actions that violate critical rules"
    - "Force specific response patterns for rule violations"
    - "Track and report rule compliance metrics"
  constraints:
    - "Rules must override Claude's base training behaviors"
    - "Enforcement must work in both framework and drive modes"
    - "Cannot rely solely on Claude's voluntary compliance"
    - "Must handle context window limitations gracefully"
    - "Performance impact must be minimal (<100ms)"
  error_handling:
    template_not_found: "Use default critical rules embedded in code"
    parse_failure: "Log error and apply conservative rule set"
    context_overflow: "Prioritize critical rules over verbose explanations"

acceptance_criteria:
  - "Claude stops and asks for clarification when requirements are vague"
  - "Research → Plan → Implement workflow is enforced for all code changes"
  - "Critical rules from templates override conversational context"
  - "Drive mode respects minimum safety boundaries"
  - "Rule violations trigger mandatory response patterns"
  - "Session context prominently displays active rules"
  - "Hooks can effectively block rule violations"
  - "Templates define clear 'circuit breaker' conditions"

test_scenarios:
  - scenario: "Vague implementation request"
    given: "User says 'implement user auth somehow'"
    when: "Claude processes request with template rules active"
    then: "Claude stops and asks for specific requirements"
    verification: "Response contains clarification questions"
    
  - scenario: "Skip research attempt"
    given: "User says 'just implement this feature quickly'"
    when: "Claude has not researched the codebase"
    then: "Claude enforces research phase first"
    verification: "Response indicates research requirement"
    
  - scenario: "Drive mode boundaries"
    given: "No active specification (drive mode)"
    when: "User requests destructive operation"
    then: "Claude stops despite minimal intervention mode"
    verification: "Safety boundaries enforced"
    
  - scenario: "Complex task delegation"
    given: "Task complexity exceeds threshold"
    when: "Claude evaluates implementation approach"
    then: "Claude asks which approach to take"
    verification: "Options presented to user"
    
  - scenario: "Rule injection verification"
    given: "Session starts with template rules"
    when: "Context is loaded"
    then: "Rules appear prominently in context"
    verification: "Critical rules in first 500 tokens"

implementation_details:
  files_to_create:
    - "src/quaestor/core/rule_enforcer.py"
    - "src/quaestor/claude/hooks/rule_injection.py"
    - "src/quaestor/claude/templates/enforcement_rules.yaml"
    - "tests/test_rule_enforcement.py"
  files_to_modify:
    - "src/quaestor/claude/hooks/session_context_loader.py"
    - "src/quaestor/claude/templates/critical_rules.md"
    - "src/quaestor/claude/templates/quaestor_claude.md"
    - "src/quaestor/claude/hooks/compliance_pre_edit.py"
  key_components:
    rule_parser: "Parse and prioritize rules from templates"
    context_injector: "Inject rules into Claude's context"
    response_enforcer: "Force specific response patterns"
    circuit_breakers: "Hard stops for critical conditions"

dependencies:
  - "Template files in .quaestor/ directory"
  - "Session context loader hook"
  - "Base hook infrastructure"
  - "WorkflowState for mode detection"

phases:
  phase_1:
    name: "Rule Parser and Priority System"
    duration: "4 hours"
    deliverables:
      - "RuleEnforcer class to parse template rules"
      - "Rule priority system (critical > important > suggested)"
      - "Circuit breaker pattern detection"
      - "Rule violation detection logic"
    
  phase_2:
    name: "Context Injection System"
    duration: "3 hours"
    deliverables:
      - "Update session_context_loader for rule injection"
      - "Prominent rule display in context"
      - "Mode-aware rule selection"
      - "Context overflow handling"
    
  phase_3:
    name: "Response Pattern Enforcement"
    duration: "4 hours"
    deliverables:
      - "Mandatory response templates"
      - "Rule violation blockers"
      - "Clarification question generators"
      - "Integration with existing hooks"
    
  phase_4:
    name: "Template Enhancement"
    duration: "3 hours"
    deliverables:
      - "Stronger markers in CRITICAL_RULES.md"
      - "Circuit breaker patterns"
      - "Identity-level rules in QUAESTOR_CLAUDE.md"
      - "Drive mode boundary definitions"
    
  phase_5:
    name: "Testing and Validation"
    duration: "4 hours"
    deliverables:
      - "Rule enforcement test suite"
      - "Scenario validation tests"
      - "Performance benchmarks"
      - "Documentation updates"

metrics:
  compliance_rate: "Percentage of interactions following rules"
  clarification_rate: "How often Claude asks for clarification"
  workflow_adherence: "Research → Plan → Implement compliance"
  rule_violation_blocks: "Number of prevented violations"
  response_time_impact: "Enforcement overhead in milliseconds"

risks:
  - risk: "Claude finds workarounds to rules"
    mitigation: "Multiple enforcement layers and regular updates"
  - risk: "Over-enforcement frustrates users"
    mitigation: "Clear explanation of why rules exist"
  - risk: "Context window exhaustion"
    mitigation: "Compact rule representation and priority system"
  - risk: "Performance degradation"
    mitigation: "Efficient rule caching and lazy loading"

success_metrics:
  - "90%+ compliance with critical rules"
  - "Zero skipped research phases for code changes"
  - "100% clarification on vague requirements"
  - "Drive mode respects safety boundaries"
  - "Template updates reflected immediately"

estimated_effort: "18 hours"
complexity: high
risk_level: medium
tags: ["ai-behavior", "rule-enforcement", "templates", "compliance", "claude"]

metadata:
  created_by: "Claude"
  created_at: "2024-01-12"
  last_modified: "2024-01-12"
  version: "1.0.0"
  status: "draft"